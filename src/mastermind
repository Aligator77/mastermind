#!/usr/bin/python

from time import sleep
from opster import command, dispatch
from cocaine.services import Service
import msgpack
from pprint import pprint

s = Service("mastermind")


@command()
def bad_groups(config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get list of broken symmetric groups from balancer'''
    res = s.enqueue("get_bad_groups", "").get()
    print res


@command()
def symmetric_groups(config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get list of symmetric groups from balancer'''
    res = s.enqueue("get_symmetric_groups", "").get()
    print res

@command()
def uncoupled_groups(config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get list of uncoupled groups from balancer'''
    res = s.enqueue("get_empty_groups", "").get()
    print res

@command()
def repair_groups(
            group,
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Repair broken symmetric groups'''
    group = int(group)

    res = s.enqueue("repair_groups", msgpack.packb(group)).get()
    print res

@command()
def group_info(
            group,
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get group info'''
    group = int(group)

    res = s.enqueue("get_group_info", msgpack.packb(group)).get()
    print res

@command()
def balance(
            size,
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get group info'''
    size = int(size)
    id = [0] * 64

    res = s.enqueue("balance", msgpack.packb((size, 1, id))).get()
    print res

@command()
def couple_groups(
            size,
            groups=('i', '', 'Use these groups in couple (example: 1:2)'),
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Make a couple of groups, number of groups is an argument'''
    size = int(size)
    if groups:
        groups = [int(g) for g in groups.split(':')]
    else:
        groups = []

    res = s.enqueue("couple_groups", msgpack.packb((size, groups))).get()
    print res

@command()
def break_couple(
            groups,
            confirm,
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Break the couple of groups, couple is an argument
        confirm parameter is a message "Yes, I want to break (bad|good) couple [1:2:3]"'''
    groups = [int(g) for g in groups.split(':')]

    res = s.enqueue("break_couple", msgpack.packb((groups, confirm))).get()
    print res

@command()
def next_group_number(
            count,
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get unused group numbers, number of groups is an argument'''
    count = int(count)

    res = s.enqueue("get_next_group_number", msgpack.packb(count)).get()
    print res

@command()
def get_group_weights(
            config=('c', 'cocaine_config.json', 'Path to cocaine dealer config')):
    '''Get weights for symmetric groups'''
    res = s.enqueue("get_group_weights", "").get()
    print res

if __name__ == '__main__':
    dispatch()
